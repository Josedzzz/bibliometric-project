@inproceedings{10.1145/3105726.3105728,
author = {Hickmott, Daniel},
title = {Developing Teachers as Computational Participants},
year = {2017},
isbn = {9781450349680},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3105726.3105728},
doi = {10.1145/3105726.3105728},
abstract = {This document briefly explains the context, motivations, background and research design of a PhD project titled "Developing Teachers as Computational Participants". This PhD project will explore how Australian Primary School teachers learn and teach the core CS skills (computational thinking, computer programming and systems thinking), their experiences implementing lessons that impart these skills and the challenges they encounter when implementing these lessons.},
booktitle = {Proceedings of the 2017 ACM Conference on International Computing Education Research},
pages = {265–266},
numpages = {2},
keywords = {teacher professional development, primary school, constructionism, computational participation},
location = {Tacoma, Washington, USA},
series = {ICER '17}
}

@inproceedings{10.1145/3626253.3631663,
author = {White, Shana V. and Scott, Allison and Yadav, Aman and Levitt, Diane},
title = {Equitable Professional Learning for K12 Computer Science Teachers},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3631663},
doi = {10.1145/3626253.3631663},
abstract = {To address racial and gender inequality in K12 STEM and computer science education, there needs to be mutli-pronged approach. In addition to the needed work for curricula that is culturally responsive and sustaining, inclusive of all student group, and positively welcomes the identities of historically marginalized people groups, K12 computer science teachers need to be equipped with the training and tools to implement the curricula, pedagogy, and instruction to mitigate the racial and gender gaps in K12 computer science education.  To address racial and gender inequality in K12 STEM and computer science education, there needs to be a multi-pronged approach. In addition to the needed work for curricula that is culturally responsive and sustaining, inclusive of all student groups, and positively welcome the identities of historically marginalized people groups, K12 computer science teachers need to be equipped with the training and tools to implement the curriculum, pedagogy, and instruction to mitigate the racial and gender gaps in K12 computer science education. Professional learning is an oft-used medium by curriculum providers as a means for teachers to adequately use boxed computer science curricula on computer science topics and content only. The panel proposes and will share how to implement culturally responsivesustaining pedagogy within K12 teacher professional learning, the importance of the integration of culturally relevant computational thinking and computer science strategies for K12 teachers, improved understanding of instructional practices that benefit all students in the CS classroom, and equity centered instructional coaching can all greatly improve chances of decreasing racial and gender equity gaps at the K12 level for historically marginalized student groups. Much of the presentation will share current tools and programming available to K12 teachers as well as propose scalable and replicable models for use in in-service teacher education broadly, and in-service computer science and STEM teacher professional learning across the nation.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1543–1545},
numpages = {3},
keywords = {culturally-responsive computing, equity, k12 computing education, k12 prefessional development, k12 professional learning, k12 pedagogy and instructional strategies},
location = {Portland, OR, USA},
series = {SIGCSE 2024}
}

@inproceedings{10.1145/3290607.3298820,
author = {Kristensson, Per Ola and Banovic, Nikola and Oulasvirta, Antti and Williamson, John},
title = {Computational Interaction with Bayesian Methods},
year = {2019},
isbn = {9781450359719},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3290607.3298820},
doi = {10.1145/3290607.3298820},
abstract = {This course introduces computational methods in human--computer interaction. Computational interaction methods use computational thinking---abstraction, automation, and analysis---to explain and enhance interaction. This course introduces the theory of practice of computational interaction by teaching Bayesian methods for interaction across four wide areas of interest when designing computationally-driven user interfaces: decoding, adaptation, learning and optimization. The lectures center on hands-on Python programming interleaved with theory and practical examples grounded in problems of wide interest in human-computer interaction.},
booktitle = {Extended Abstracts of the 2019 CHI Conference on Human Factors in Computing Systems},
pages = {1–6},
numpages = {6},
keywords = {optimization, machine learning, inference, computational interaction},
location = {Glasgow, Scotland Uk},
series = {CHI EA '19}
}

@inproceedings{10.1145/3287324.3287529,
author = {Soh, Leen-Kiat and Peteranetz, Markeya S.},
title = {Adopting, Integrating, and Evaluating Computational Creativity Exercises to Improve Student Learning},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287529},
doi = {10.1145/3287324.3287529},
abstract = {In this workshop, participants will learn how to integrate in their classes computational thinking and creative thinking activities that have been shown via rigorous research to significantly improve student learning and performance. Specifically, participants will be familiarized with the suite of Computational Creativity Exercises (non-programming-based, group-based, active learning exercises), take part in completing two of the exercises, learn how to integrate and adapt them into their courses, and be exposed to the educational research studies behind the development, design, and administration of these exercises. Participants will also learn how to conduct evidence-based, educational research studies. Workshop sessions will include presentations, panel-based Q&amp;A, breakout group discussions, and hands-on activities. More information can be found at cse.unl.edu/agents/ic2think/CCEWorkshop},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1237},
numpages = {1},
keywords = {creativity, computational thinking, computational creativity},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3170427.3170654,
author = {Williamson, John and Oulasvirta, Antti and Hilliges, Otmar and Kristensson, Per Ola},
title = {Computational Interaction: Theory and Practice},
year = {2018},
isbn = {9781450356213},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3170427.3170654},
doi = {10.1145/3170427.3170654},
abstract = {This course introduces computational methods in human--computer interaction. Computational interaction methods use computational thinking -- abstraction, automation, and analysis -- to explain and enhance interaction. This course introduces optimization and probabilistic inference as principled methods. Lectures center on hands-on Python programming, interleaving theory and practical examples.},
booktitle = {Extended Abstracts of the 2018 CHI Conference on Human Factors in Computing Systems},
pages = {1–4},
numpages = {4},
keywords = {computational interaction, inference, machine learning, optimization},
location = {Montreal QC, Canada},
series = {CHI EA '18}
}

@inproceedings{10.1145/3502717.3532150,
author = {Spieler, Bernadette and Schifferle, Tobias M. and Dahinden, Manuela},
title = {The "Making at School" Project: Planning Interdisciplinary Activities},
year = {2022},
isbn = {9781450392006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3502717.3532150},
doi = {10.1145/3502717.3532150},
abstract = {"Making" as a "do-it-yourself" and tinker mentality provides motivating and interdisciplinary ways to experiment and fosters transversal competences such as computational thinking skills. The joint innovation project "Making at School" (https://explore-making.ch; 10/2021 - 9/2023) of the Zurich University of Teacher Education (PHZH), the University of Zurich, and the CreativeLab Zurich is developing various interdisciplinary teacher training courses on Maker-Education for K12-teachers. In addition to a first basic module in spring 2022, advanced modules will be offered in autumn 2022, e.g., Digital Fabrication I (lasercutter, 3D printing) or BioTinkering. Preliminary cardboard and digital versions of a Making planning framework to support teachers in Making are already in development, evaluated, and will be improved using a design research approach together with teachers and (inter-)national experts.},
booktitle = {Proceedings of the 27th ACM Conference on on Innovation and Technology in Computer Science Education Vol. 2},
pages = {624},
numpages = {1},
keywords = {interdisciplinary teacher training, maker-education, making, steam},
location = {Dublin, Ireland},
series = {ITiCSE '22}
}

@inproceedings{10.1145/3568739.3568796,
author = {Zhou, Yujun and Zhan, Zehui and Liu, Lu and Wan, Jiayi and Liu, Simai and Zou, Xuanxuan},
title = {International Prospects and Trends of Artificial Intelligence Education: A Content Analysis of Top-level AI Curriculum across Countries},
year = {2023},
isbn = {9781450398091},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3568739.3568796},
doi = {10.1145/3568739.3568796},
abstract = {This study intends to investigate the present situation of AI curriculum offered for grades K-12. We screened 11 representative countries and areas from six continents and assessed the content of their top K-12 AI courses in terms of teaching content and teaching implementation in order to comprehend the current state of K-12 AI courses in diverse nations. Provide some ideas and suggestions for the development of AI courses for students in grades K-12. (1) Countries may choose AI applications, AI influences in various aspects, AI ethics, machine learning, data, classification, reasoning, Identify, and other content to establish independent AI teaching content standards; or choose programming as the core teaching content/starting point; or integrate programming, data, AI, and other content related to improving students' computational thinking into computer/science/technology courses. (2) Project-based learning is still the primary way of instruction, along with a range of other approaches. There are four categories of available instructional resources, and there is an abundance of them. Most countries emphasize the evaluation of students' abilities and the results achieved in the learning process.},
booktitle = {Proceedings of the 6th International Conference on Digital Technology in Education},
pages = {337–343},
numpages = {7},
location = {Hangzhou, China},
series = {ICDTE '22}
}

@inproceedings{10.1145/3287324.3287396,
author = {Rich, Kathryn M. and Strickland, Carla and Binkowski, T. Andrew and Franklin, Diana},
title = {A K-8 Debugging Learning Trajectory Derived from Research Literature},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287396},
doi = {10.1145/3287324.3287396},
abstract = {Curriculum development is dependent on the following question: What are the learning goals for a specific topic, and what are reasonable ways to organize and order those goals? Learning trajectories (LTs) for computational thinking (CT) topics will help to guide emerging curriculum development efforts for computer science in elementary school. This study describes the development of an LT for Debugging. We conducted a rigorous analysis of scholarly research on K-8 computer science education to extract what concepts in debugging students should and are capable of learning. The concepts were organized into the LT presented within. In this paper, we describe the three dimensions of debugging that emerged during the creation of the trajectory: (1) strategies for finding and fixing errors, (2) types of errors, and (3) the role of errors in problem solving. In doing so, we go beyond identification of specific debugging strategies to further articulate knowledge that would help students understand when to use those techniques and why they are successful. Finally, we illustrate how the Debugging LT has guided our efforts to develop an integrated mathematics and CT curriculum for grades 3-5.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {745–751},
numpages = {7},
keywords = {learning trajectory, k-8, debugging, computational thinking},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/2787622.2787751,
author = {Van Wart, Sarah Jane},
title = {Computer Science Meets Social Studies: Embedding CS in the Study of Locally Grounded Civic Issues},
year = {2015},
isbn = {9781450336307},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2787622.2787751},
doi = {10.1145/2787622.2787751},
abstract = {Data science is an emerging 21st century literacy that promises to support learning in a wide variety of disciplines, from science, to social science, to the humanities. It also provides an engaging context in which to learn computational thinking skills in existing classroom contexts. For my dissertation research, I will explore whether and how data science can support inquiry-based learning in social studies. I conjecture that data science could provide students with an opportunity to use computational thinking to better understand their social world, while also allowing students to draw from and make sense of their own experiences. I plan to explore this idea by enhancing and evaluating a software tool, Local Ground, and creating a curriculum that helps young people identify and describe salient characteristics of their lived realities, moving from unstructured to structured data representations (e.g., photos to tags to databases). This process may generate a rich, motivating data source to explore subsequent ideas in computational thinking and social science.},
booktitle = {Proceedings of the Eleventh Annual International Conference on International Computing Education Research},
pages = {281–282},
numpages = {2},
keywords = {interdisciplinary approaches, data science education, computational thinking, broadening participation},
location = {Omaha, Nebraska, USA},
series = {ICER '15}
}

@inproceedings{10.1145/3545947.3576306,
author = {Menier, Amanda and Moore, Paula and Boisvert, Deborah and Peterfreund, Alan and Sexton, Stacey and Xavier, Jeffrey and Johnston, Brianna},
title = {Intro to CS for Educators: A Pre-Curricula PD Workshop},
year = {2023},
isbn = {9781450394338},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545947.3576306},
doi = {10.1145/3545947.3576306},
abstract = {Many K-12 educators who are new to computer science (CS) may have a lack of confidence or sense of intimidation when starting their CS teaching journey. To mitigate this, Massachusetts DESE contracted CSforMA to create a three-day "Introduction to Computer Science for Educators" workshop (ICSW) focused on CS fundamentals. The ICSW covered grade-level CS terminology and concepts including computational thinking, physical computing, and programming. Evaluation of the ICSW showed 98\% of respondents reported increased knowledge of CS. In a survey administered later that summer, 100\% of respondents who took the ICSW reported that it helped them better understand curriculum materials. This replicable, scalable, and successful ICSW model could benefit other State DoEs and CS professional development coordinators. This work also shows the benefits of using an external evaluator.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1362},
numpages = {1},
keywords = {professional development, k-12 education, education},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3689050.3706008,
author = {Matthews, Sarah and Nicholas, Maria and Paatsch, Louise and Kervin, Lisa and Wyeth, Peta},
title = {Embeddables: Designing Physical-Digital Manipulatives for Young Children},
year = {2025},
isbn = {9798400711978},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3689050.3706008},
doi = {10.1145/3689050.3706008},
abstract = {Introducing digital literacy to young children develops foundational skills in problem-solving and supports their cognitive development, including critical thinking. However, physical manipulatives for digital literacy are not always designed for early-year environments or specifically for young children. Physical manipulatives can offer developmentally appropriate tools to introduce foundational digital literacy through dynamic system knowledge before children become developmentally ready for more formalised coding activities. This paper presents an initial study in a preschool environment with children (ages 3 – 5 years) using novel physical manipulatives, Embeddables (Fig. 1), in child-led free and guided play activities in a preschool. From our initial analysis of the types of activities the children engaged in, we identify how, firstly, children used the proximal relations to undertake experimental understanding of the devices, which secondly led to using the proximal relationships in their social play, further supported by the scale and feedback of the toys.},
booktitle = {Proceedings of the Nineteenth International Conference on Tangible, Embedded, and Embodied Interaction},
articleno = {69},
numpages = {7},
keywords = {Computational Thinking, Early Years, Interaction Design, Tangible},
location = {
},
series = {TEI '25}
}

@inproceedings{10.1145/3322385.3322399,
author = {Hampton, Lelia and Cummings, Robert and Gosha, Kinnis},
title = {Improving Computer Science Instruction and Computer Use for African American Secondary School Students: A Focus Group Exploration of Computer Science Identity of African American Teachers},
year = {2019},
isbn = {9781450360883},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3322385.3322399},
doi = {10.1145/3322385.3322399},
abstract = {As the demand for computing careers increases, it is important to implement strategies to broaden the participation in computer science for African Americans. Computer science courses and academic pathways are not always offered in secondary schools. Many teachers are not trained in computer science, yet are pushed to incorporate more computing, computational thinking, and computer usage. A qualitative focus group study was implemented to assess the computer science identities of African American teachers and of their respective urban secondary schools serving African American students. Three major codes were identified: district administration of computer and computing implementation, teacher attitudes towards computer science instruction, and teachers' recommendations to improve computer science and computational thinking instruction and outreach for African American secondary school students. Findings can be used to improve computer science and technology rollout programs from county and district administrations, teacher instruction with digital tools, and computer science outreach for African American secondary school students.},
booktitle = {Proceedings of the 2019 on Computers and People Research Conference},
pages = {78–84},
numpages = {7},
keywords = {underrepresented minorities, sense of belonging, self-efficacy, k-12 education, computing identity, computing education},
location = {Nashville, TN, USA},
series = {SIGMIS-CPR '19}
}

@inproceedings{10.1145/3408877.3432570,
author = {Garcia, Daniel D. and Rogers, Michael P. and Stefik, Andreas},
title = {Fun and Engaging Pre-CS1 Programming Languages},
year = {2021},
isbn = {9781450380621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3408877.3432570},
doi = {10.1145/3408877.3432570},
abstract = {The CSforALL movement to bring computational thinking to K-12 has been a boon for practitioners and language developers. This panel features three educators passionate about a particular lan- guage that has been successful with K-12 audiences. Each will demonstrate their language, describe what makes it unique, and share some of the fun and engaging projects students have created.},
booktitle = {Proceedings of the 52nd ACM Technical Symposium on Computer Science Education},
pages = {760–761},
numpages = {2},
keywords = {pre-cs1, outreach, languages, k-12 cs education, cs0},
location = {Virtual Event, USA},
series = {SIGCSE '21}
}

@inproceedings{10.1145/3173225.3173275,
author = {Maquil, Val\'{e}rie and Moll, Christian and Schwartz, Lou and Hermen, Johannes},
title = {Kniwwelino: A Lightweight and WiFi Enabled Prototyping Platform for Children},
year = {2018},
isbn = {9781450355681},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3173225.3173275},
doi = {10.1145/3173225.3173275},
abstract = {Nowadays, computational thinking skills are considered as fundamental for our future daily life and many initiatives and tools are created to foster these skills. In this paper, we present the Kniwwelino, a new platform for prototyping physical computing projects based on WiFi. The novelty of our solution lies in the use of a WiFi chip on a small, extendable board, programmable via a block based visual programming language, making the platform compact, low-cost, WiFi enabled, and accessible to children. This paper presents the design rationale and implementation of the platform as well as two simple, example projects making use of the new WiFi-based functionalities.},
booktitle = {Proceedings of the Twelfth International Conference on Tangible, Embedded, and Embodied Interaction},
pages = {94–100},
numpages = {7},
keywords = {prototyping, physical computing, digital skills, computational thinking, children.},
location = {Stockholm, Sweden},
series = {TEI '18}
}

@article{10.5555/3381631.3381649,
author = {Jenkins, Janet T. and Terwilliger, Mark G.},
title = {Examining strategies to improve student success in CS1},
year = {2019},
issue_date = {October 2019},
publisher = {Consortium for Computing Sciences in Colleges},
address = {Evansville, IN, USA},
volume = {35},
number = {4},
issn = {1937-4771},
abstract = {With the pervasiveness of the necessity of computational thinking across fields, more universities are requiring courses that build students' ability to think computationally. Computer Science 1 (CS1) is one such course where computational thinking is required This paper summarizes the work of two CS faculty who co-taught separate sections of CS1 for five semesters. Course modifications were made to augment CS1 with support inside and outside of the classroom for students to be successful. The use of in class tutors and requiring design documents were two of the primary modifications made to the course. A variety of data was collected in areas such as student planning, program design, frustration, and resources used to determine what relationships impact student success. One of the main benefits observed was an increase in the student pass rate.},
journal = {J. Comput. Sci. Coll.},
month = oct,
pages = {124–132},
numpages = {9}
}

@inproceedings{10.1145/3456887.3456925,
author = {Meng, Ji},
title = {The Understanding and Evolution of the Construction Elements of Educational Computing Experiment},
year = {2021},
isbn = {9781450389969},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3456887.3456925},
doi = {10.1145/3456887.3456925},
abstract = {A unified understanding of the nature of computation-based education experiment is formed based on education experiment and computational experiment. Through a perspective analysis of the research paradigm of computation-based education experiment, the components of computation-based education experiment are identified, which are computer, network architecture, operating system, high-level programming language, intermediate data processing, external interface, and computational thinking. Their respective features are also described. The forces driving the change of these components are analyzed from two aspects: the change of educational research needs and the development of informatization. Finally, the specific changes of each component are introduced and the nature of change is summarized.},
booktitle = {2021 2nd International Conference on Computers, Information Processing and Advanced Education},
pages = {171–174},
numpages = {4},
location = {Ottawa, ON, Canada},
series = {CIPAE 2021}
}

@inproceedings{10.1145/2532748.2532763,
author = {Antonitsch, Peter K. and Gigacher, Cornelia and Hanisch, Liselotte and Sabitzer, Barbara},
title = {A media-reduced approach towards informatics at primary level},
year = {2013},
isbn = {9781450324557},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2532748.2532763},
doi = {10.1145/2532748.2532763},
abstract = {At the moment, informatics education stretches downward to reach primary education. This article emphasizes computational thinking, focuses upon goals of primary education and unveils how to connect to existing teaching and learning patterns when integrating computational thinking into primary education. Furthermore, a framework is sketched to combine computational thinking with computational doing in a media-reduced way.},
booktitle = {Proceedings of the 8th Workshop in Primary and Secondary Computing Education},
pages = {118–121},
numpages = {4},
keywords = {thinking, planning, computational thinking},
location = {Aarhus, Denmark},
series = {WiPSE '13}
}

@inproceedings{10.1145/3605468.3609778,
author = {Bahr, Tobias},
title = {Developing a Computer Science Content Knowledge Test for 10th Grade Students},
year = {2023},
isbn = {9798400708510},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3605468.3609778},
doi = {10.1145/3605468.3609778},
abstract = {Computer Science competencies are becoming increasingly important in our current digitised society. To foster students in Computer Science, different countries have introduced subjects with new educational plans based on Computer Science frameworks, such as the K-12 CS Framework and the Informatics Reference Framework for Schools. Those include, in one way or another, four content areas: data and coding (including data structures and their applications), algorithms (involving variables, loops, and software projects), computers and networks (emphasizing the role of computers in a network and data transmission) and information society and data security (covering topics like asymmetric encryption and personal data protection). Various tests have been developed in the field of Computer Science Education for different age groups, primarily at university level for introductory Computer Science courses, and some for upper secondary school level and below, particularly for Computational Thinking. Given the research context, the objective of this study is to develop a set of items that measures the content knowledge in the four aforementioned areas. Specifically, the study focuses on the educational plan of the Computer Science subject called IMP, which is taught from the 8th to the 10th grade in secondary schools in Baden-W\"{u}rttemberg, Germany. In total, 155 items were evaluated by experts, resulting in a test consisting of 68 items. This poster abstract presents the ongoing progress of the test development.},
booktitle = {Proceedings of the 18th WiPSCE Conference on Primary and Secondary Computing Education Research},
articleno = {31},
numpages = {2},
keywords = {Competency, Computer Science, Content Knowledge, Expert Rating},
location = {Cambridge, United Kingdom},
series = {WiPSCE '23}
}

@inproceedings{10.1145/3159450.3159590,
author = {Ritz, Anna},
title = {Programming the Central Dogma: An Integrated Unit on Computer Science and Molecular Biology Concepts},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3159590},
doi = {10.1145/3159450.3159590},
abstract = {Much of modern biology requires quantitative and computational skills for the proper analysis of large-scale datasets, and there is a recognized need for computational training in undergraduate biology programs. This experience report describes a four-week unit designed to introduce fundamental computer science concepts and molecular biology concepts in an integrated fashion. The unit serves as the first four weeks of an introductory course taught within the Biology Department at an undergraduate institution, and is designed to introduce computational thinking to non-computational science majors. Survey results reveal that the course has attracted students from all years (first years through seniors), the majority of students have been women, and students have large self-perceived learning gains in computer science concepts. The unit shows promise for engaging non-computational students through applications in introductory molecular biology. Materials are available at http://www.reed.edu/biology/courses/bio131/resources.html.},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {239–244},
numpages = {6},
keywords = {undergraduate education, introductory programming, computational thinking, computational biology},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@inproceedings{10.1145/3641555.3705275,
author = {Manesh, Daniel and Jelson, Andrew and Altland, Emily and Freeman, Jason and Lee, Sang Won},
title = {Understanding the Effects of Integrating Music Programming and Web Development in a Summer Camp for High School Students},
year = {2025},
isbn = {9798400705328},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3641555.3705275},
doi = {10.1145/3641555.3705275},
abstract = {This poster presents the development and implementation of a 10-day remix-based summer camp curriculum designed to introduce high school students, particularly a multinational cohort of young women, to programming through creative coding. The curriculum integrates music composition using EarSketch and web development with HTML and CSS. The camp aims to inspire participants to gain self-efficacy in programming and motivate them to explore STEM/computing careers. Preliminary results from surveys and interviews indicate increased confidence in programming skills. This ongoing research explores the impact of remixing as a gateway for transitioning into more general-purpose computing domains such as web development.},
booktitle = {Proceedings of the 56th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1535–1536},
numpages = {2},
keywords = {computational thinking, computer science education},
location = {Pittsburgh, PA, USA},
series = {SIGCSETS 2025}
}

@inproceedings{10.1145/3159450.3162348,
author = {Soh, Leen-Kiat and Ingraham, Elizabeth and Shell, Duane F.},
title = {Computational Creativity Exercises for Improving Student Learning and Performance: (Abstract Only)},
year = {2018},
isbn = {9781450351034},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3159450.3162348},
doi = {10.1145/3159450.3162348},
abstract = {In this workshop, we will introduce you to a suite of Computational Creativity Exercises (CCEs) that have been shown to significantly improve student learning and achievement in introductory and advanced CS courses. CCEs address core aspects of computational thinking while exposing students to creative thinking skills, and can be adapted for use in your own courses. Activities such as writing a story in separate chapters and then merging the chapters to form a coherent whole, creating quilt-like patterns with written descriptions, or designing testing strategies for an alien health machine require students to apply computational thinking to unorthodox contexts and situations promoting creative application of CS knowledge and skills. CCEs are group-based, promote active learning, and are designed to foster collaborative problem solving necessary in today's workplace. They require no programming experience making them accessible to students including those with limited CS background and those with interests in non-CS disciplines, which can encourage more diverse participation in computing. Engage in a hands-on demo of a CCE and learn how to adapt CCEs for use in your classes, including technical support from the IC2Think Project team. Learn about the rigorous research studies behind the development, design and administration of these CCEs, including the instruments we used to evaluate the CCEs. Workshop session will include "how-to" presentations, panel-based Q&amp;A, breakout group discussions, and hands-on activities. Let's compute, create, and collaborate!},
booktitle = {Proceedings of the 49th ACM Technical Symposium on Computer Science Education},
pages = {1060},
numpages = {1},
keywords = {creative thinking, computational thinking, active learning},
location = {Baltimore, Maryland, USA},
series = {SIGCSE '18}
}

@inproceedings{10.1145/3641555.3705048,
author = {Phelps, Victoria and Ball, Michael and Garcia, Dan and Garcia, Yuan},
title = {Snap! 10 --- From Blocks to AI: Empowering Learning with Custom Primitives and Machine Learning},
year = {2025},
isbn = {9798400705328},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3641555.3705048},
doi = {10.1145/3641555.3705048},
abstract = {This year's Snap! 10 release marks a major leap forward, bringing advanced machine learning capabilities directly into the hands of students and educators. Version 10 introduces support for building ML models, including single-layer perceptrons, making it easier than ever for students to explore AI concepts within a block-based environment. These updates are accompanied by the ability to define Snap! primitives using Snap! blocks themselves, empowering users to deeply customize and extend the language.Building on the rich foundation of previous versions, Snap! 10 also includes hundreds of improvements aimed at enhancing both the classroom and the individual learning experience. These include quality-of-life updates such as new debugging tools, dynamic runtime access via the ''this'' reporter, and expanded support for working with dictionaries and APIs.In this demo, we'll showcase the exciting new features in Snap! 10, focusing on how they can be used to engage students in advanced topics like machine learning, data science, and computational thinking. Attendees will learn how to leverage these tools to build custom experiences that meet the evolving needs of their classrooms.},
booktitle = {Proceedings of the 56th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1737},
numpages = {1},
keywords = {ai, block-based programming, llm, metaprogramming, programming paradigms, snap!},
location = {Pittsburgh, PA, USA},
series = {SIGCSETS 2025}
}

@inproceedings{10.1145/3545945.3569738,
author = {Bockmon, Ryan and Bourke, Chris},
title = {Validation of the Placement Skill Inventory: A CS0/CS1 Placement Exam},
year = {2023},
isbn = {9781450394314},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545945.3569738},
doi = {10.1145/3545945.3569738},
abstract = {Student success in introductory computing course continues to be a major challenge. Though there has been much research and innovation in recent years to help reduce high failure rates, a substantial population of students still struggle in a typical CS1 course. In this paper we create an argument of validity of the Placement Skills Inventory (PSIv1). The goal of the PSIv1 is to help advise and place students into an appropriate introductory computing course. While placement exams have been developed in the past, the goal of PSIv1 is to differentiate students who will be successful in a CS1 course and those that would be better served taking a CS0 course as their first computing course. In contrast, traditional placement exams have focused on differentiating students between CS1 and CS2. The PSIv1 is a combination of two instruments, the Computational Thinking Concepts and Skills Test and the Second Computer Science 1 Exam Revised Version 2. These two instruments measure students' computation thinking skills and prior programming knowledge respectively. The PSIv1 was administered to all students enrolled in either a CS0 or CS1 during the first two weeks of the semester. We use Item Response Theory to create an argument of validity of the PSIv1 and look at differences in scores on the PSIv1 based on if a student passed or failed a CS0 and CS1 course. We then used the results to create an advising strategy and criteria to help students decided if they should enroll in a CS0 or CS1 course.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 1},
pages = {39–45},
numpages = {7},
keywords = {assessment, cs0, cs1, irt, validation},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3572549.3572612,
author = {Hsu, Jih-Shih and Tsai, Wen-Lung},
title = {Influence of Grouping Strategies for Cooperative Learning on the Learning Outcome of Programming Course},
year = {2023},
isbn = {9781450397766},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3572549.3572612},
doi = {10.1145/3572549.3572612},
abstract = {In recent years, programming courses has been incorporated into academic curriculums. However, as many students encounter setbacks in the learning process, this study introduces the grouping strategies for cooperation learning into programming courses, which is intended to help students improve their learning outcomes and enhance their computational thinking abilities.The subjects were 75 college students from two classes, which were divided into student-selected and heterogeneous groups, and took the experimental programming course for three weeks. The pre-test and post-test learning outcomes were validate by t-test and one-way ANOVA. This experiment aimed to understand the learning outcomes after adopting grouping strategies, as well as the learning outcomes of students with different backgrounds after adopting grouping strategies.The results showed that both student-selected grouping and heterogeneous grouping can improve the learning outcome. The learning outcome with student-selected grouping is business management background &gt; other backgrounds &gt; design background &gt; electrical engineering and computer science background. With heterogeneous grouping, the learning outcome of the design background is close to that of the electrical engineering and computer science background, and there is no significant difference among electrical engineering and computer science, business management, and other learning backgrounds. Thus, the learning outcome with heterogeneous grouping is better than that with student-selected grouping.},
booktitle = {Proceedings of the 14th International Conference on Education Technology and Computers},
pages = {393–402},
numpages = {10},
keywords = {single-factor experiment design, programming, grouping strategies, cooperative learning},
location = {Barcelona, Spain},
series = {ICETC '22}
}

@inproceedings{10.1145/3649405.3659521,
author = {Wynn, Adam and Wang, Jingyun and Valente, Andrea},
title = {Simplifying Multimedia Programming for Novice Programmers: MediaLib and Its Learning Materials},
year = {2024},
isbn = {9798400706035},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3649405.3659521},
doi = {10.1145/3649405.3659521},
abstract = {Beginner programmers can develop an intuitive understanding of programming by leveraging the motivating field of multimedia to visually inspect outputs and experiment with different ways to solve problems. This paper presents MediaLib, a Python library designed to facilitate multimedia programming and lessen the cognitive load associated with programming for novice programmers. In addition, we designed an official MediaLib website which contains the library itself, two tutorials, and clear documentation. The tutorial clearly presents the learning objectives of each lesson and contains exercises related to MediaLib. We designed these exercises to help students gain knowledge incrementally, without requiring in-depth maths knowledge.},
booktitle = {Proceedings of the 2024 on Innovation and Technology in Computer Science Education V. 2},
pages = {785–786},
numpages = {2},
keywords = {beginners, computational thinking, library, multimedia programming, programming skills, python, teaching materials},
location = {Milan, Italy},
series = {ITiCSE 2024}
}

@inproceedings{10.1145/3287324.3293765,
author = {Kite, Vance and Park, Soonhye and Wiebe, Eric},
title = {Recognizing and Questioning the CT Education Paradigm},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3293765},
doi = {10.1145/3287324.3293765},
abstract = {In 1962, Thomas Kuhn changed our understanding of scientific progress through his explanation of scientific paradigms and attribution of scientific advances to paradigm shifts. According to Kuhn, a discipline's paradigm drives research, provides explanations, and directs the accumulation of discipline-specific knowledge. In 2006 and 2008 Jeanette Wing authored articles that reignited interest in computational thinking (CT) education and CT education research. Wing's articles, arguably, set in place the conceptual foundations of the paradigm currently guiding CT education and paved the way for a fruitful decade of CT education research. We are concerned, however, that the present direction of CT education and research will not support CT as an integral part of K-12 education. In its current form, CT instruction focuses almost exclusively on teaching students to program and isolates CT from disciplinary content; perpetuating the persistent misconception that programming = CT. This approach to CT education may deprive students of the opportunity to adequately develop foundational CT skills (e.g. systems thinking, abstraction and generalization, data collection and utilization, solution evaluation) and may prevent teachers from persistently and meaningfully integrating CT into their curriculum. Through this talk, we identify features of the current CT paradigm, question their alignment with Wing's ideal of "computational thinking for everyone," and propose specific recommendations for expanding the current CT paradigm.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1286},
numpages = {1},
keywords = {computational thinking paradigm, computational thinking},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@book{10.1145/3724411,
author = {Nutwell, Emily and Badger, Kelsey},
title = {Public Data in the Public Interest: A Spreadsheet-Based Project for High School Computing},
year = {2025},
isbn = {9798400715709},
abstract = {Data for Healthy Communities (DHC) is a 15-hour high school project that uses spreadsheets and public data to provide an accessible introduction to data science in the broader context of decision making for complex societal problems. Students work with real-world government data in the context of public health and will learn how to use data as evidence to support an argument for investment in their local communities. The no-code interface of spreadsheet software allows students to explore basic computing concepts such as variables and functions while engaging with authentic public health challenges like air quality, health inequity, and environmental burden. The intention is to lower the barrier for students' first introduction to computing and to present options for embedding data science education in a wider variety of curricular areas.The project is scaffolded by skill-building modules that use a mix of lectures, class demonstrations, and labs to guide students through exploring, analyzing, and visualizing data to make an argument. Students then apply these skills in a team-based activity that challenges them to use real neighborhood-level community indicators to create a structured presentation to a city council to advocate for community investment. After the student presentations, it is recommended to hold a class discussion to highlight the complexity of real-world problems where there is no one right answer. Rather, complex problems often require teams to consider several factors to build an argument for a proposed solution.},
numpages = {4}
}

@inproceedings{10.1145/2818314.2818328,
author = {Duncan, Caitlin and Bell, Tim},
title = {A Pilot Computer Science and Programming Course for Primary School Students},
year = {2015},
isbn = {9781450337533},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2818314.2818328},
doi = {10.1145/2818314.2818328},
abstract = {Computer Science and programming are being introduced to school curricula in many western countries in an effort to equip students with Computational Thinking skills. However, as these subjects are still relatively new to pre-tertiary education there is much investigation to be done into how best to present these topics and how to prepare teachers. In this study we focus on the presentation of topics relating to computing, Computational Thinking, and Computer Science for primary schools.We analyse English-language curricula that have been published, specifically the English, Australian and CSTA curricula for primary schools. From this we establish the main topics covered, and how they are positioned to be suitable for students from the first year of school to approximately their eighth year.We then report on a pilot study of a curriculum based on Computational Thinking; long term the study will encompass a range of topics and year levels, but the pilot focused on topics suitable for 11 to 12 year old students. Here we detail the design of this part of the curriculum, the manner of its delivery, and the experiences and observations of the generalist teacher who taught the course. Through assessment data, student responses to an attitude survey, and class observations we have evaluated the pilot curriculum. The findings of this study are being used to inform the design of a planned larger scale study.},
booktitle = {Proceedings of the Workshop in Primary and Secondary Computing Education},
pages = {39–48},
numpages = {10},
keywords = {programming, primary school, curriculum, computational thinking, Algorithms},
location = {London, United Kingdom},
series = {WiPSCE '15}
}

@inproceedings{10.1145/3386201.3386213,
author = {Shaw, Fayette and Kshirsagar, Khushbu and Wendell, Kristen and Danahy, Ethan and Bernstein, Debra and Puttick, Gillian and Cassidy, Michael},
title = {Characterizing Student Artifacts in a Multi-disciplinary Biomimicry and Robotics Unit},
year = {2021},
isbn = {9781450375436},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3386201.3386213},
doi = {10.1145/3386201.3386213},
abstract = {As states are adopting NGSS, engineering is increasingly being integrated in K-12 science education. While middle schools have typically segregated learning by discipline, educators are recognizing the importance of making connections across STEM disciplines. This paper presents robot artifacts built by students in an interdisciplinary middle school curriculum that combines biology, engineering, and computational thinking. In this curriculum, students analyze animals and use them as inspiration to build biomimetic robots - robots inspired by animals. We characterized and classified these artifacts based on their robots' mechanical structure and biomimetic structure and motion.},
booktitle = {Proceedings of the FabLearn 2020 - 9th Annual Conference on Maker Education},
pages = {34–39},
numpages = {6},
keywords = {middle school education, educational robotics, curriculum, Biomimicry},
location = {New York, NY, USA},
series = {FabLearn '20}
}

@inproceedings{10.1145/3173225.3173270,
author = {Bonani, Andrea and Del Fatto, Vincenzo and Gennari, Rosella},
title = {The Evolving Design of Tangibles for Graph Algorithmic Thinking},
year = {2018},
isbn = {9781450355681},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3173225.3173270},
doi = {10.1145/3173225.3173270},
abstract = {Algorithmic thinking is at the core of computational thinking. Tangible interactive solutions can help children develop algorithmic thinking skills. This paper focusses on exploratory research concerning tangibles for graph algorithmic thinking for primary and middle schools. By following an action-research process, tangibles evolved through prototyping and actions-studies. The paper overviews their evolution and delves into its most recent action: an ecological study with 8 middle school children, and 5 primary school children, using tangibles for graph algorithmic thinking. It ends by reflecting on results and future work.},
booktitle = {Proceedings of the Twelfth International Conference on Tangible, Embedded, and Embodied Interaction},
pages = {65–72},
numpages = {8},
keywords = {tangible design, primary school, middle school., iot, children, algorithmic thinking, action research},
location = {Stockholm, Sweden},
series = {TEI '18}
}

@inproceedings{10.1145/3677619.3677634,
author = {Repenning, Alexander and Grabowski, Susanne},
title = {Scaffolding Creative Programming Projects},
year = {2024},
isbn = {9798400710056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3677619.3677634},
doi = {10.1145/3677619.3677634},
abstract = {While most teachers welcome the idea of learning activities fostering creativity, it is not clear how to effectively scaffold creativity. Without suitable pedagogical approaches, it is difficult to provide appropriate levels of scaffolding. Over-scaffolding, on the one hand, while providing support appreciated especially by less experienced students, leaves little room for creative expression. Under-scaffolding, on the other hand, while fostering more authentic learning opportunities with a high potential for creativity, can lead to student frustration. The Process Artifact Creativity Landscape (PACL) is a framework that helps pre-service teachers scaffold creative projects. PACL consists of a two dimensional space providing four scaffolding approaches offering different tradeoffs between scaffolding and creativity. This paper introduces the PACL framework and outlines experiences with K–6 preservice teachers reasoning about scaffold creative programming projects.},
booktitle = {Proceedings of the 19th WiPSCE Conference on Primary and Secondary Computing Education Research},
articleno = {16},
numpages = {6},
keywords = {Computer science education, computational thinking, creativity, preservice teacher education, scaffolding},
location = {Munich, Germany},
series = {WiPSCE '24}
}

@inproceedings{10.1145/3545947.3576345,
author = {Vandenberg, Jessica and Gupta, Anisha and Smith, Andy and ElSayed, Rasha and Fox, Kimkinyona and Hubbard Cheuoua, Aleata and Minogue, James and Oliver, Kevin and Ringstaff, Cathy and Mott, Bradford},
title = {Supporting Upper Elementary Students in Multidisciplinary Block-Based Narrative Programming},
year = {2023},
isbn = {9781450394338},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545947.3576345},
doi = {10.1145/3545947.3576345},
abstract = {Digital storytelling, which combines traditional storytelling with digital tools, has seen growing popularity as a means of creating motivating problem-solving activities in K-12 education. Though an attractive potential solution to integrating language arts skills across topic areas such as computational thinking and science, better understanding of how to structure and support these activities is needed to increase adoption by teachers. Building on prior research on block-based programming for interactive storytelling, we present initial results from a study of 28 narrative programs created by upper elementary students that were collected in both classroom and extracurricular contexts. The narrative programs are evaluated across multiple dimensions to better understand the types of narrative programs being created by the students, characteristics of the students who created the narratives, and what types of support could most benefit the students in their narrative program construction. In addition to analyzing the student-created narrative programs, we also provide recommendations for promising system-generated and instructor-led supports.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1401},
numpages = {1},
keywords = {k-12 education, game-based learning, computer science education},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

@inproceedings{10.1145/3649217.3653563,
author = {\v{S}v\'{a}bensk\'{y}, Valdemar and Pankiewicz, Maciej and Zhang, Jiayi and Cloude, Elizabeth B. and Baker, Ryan S. and Fouh, Eric},
title = {Comparison of Three Programming Error Measures for Explaining Variability in CS1 Grades},
year = {2024},
isbn = {9798400706004},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3649217.3653563},
doi = {10.1145/3649217.3653563},
abstract = {Programming courses can be challenging for first year university students, especially for those without prior coding experience. Students initially struggle with code syntax, but as more advanced topics are introduced across a semester, the difficulty in learning to program shifts to learning computational thinking (e.g., debugging strategies). This study examined the relationships between students' rate of programming errors and their grades on two exams. Using an online integrated development environment, data were collected from 280 students in a Java programming course. The course had two parts. The first focused on introductory procedural programming and culminated with exam 1, while the second part covered more complex topics and object-oriented programming and ended with exam 2. To measure students' programming abilities, 51095 code snapshots were collected from students while they completed assignments that were autograded based on unit tests. Compiler and runtime errors were extracted from the snapshots, and three measures - Error Count, Error Quotient and Repeated Error Density - were explored to identify the best measure explaining variability in exam grades. Models utilizing Error Quotient outperformed the models using the other two measures, in terms of the explained variability in grades and Bayesian Information Criterion. Compiler errors were significant predictors of exam 1 grades but not exam 2 grades; only runtime errors significantly predicted exam 2 grades. The findings indicate that leveraging Error Quotient with multiple error types (compiler and runtime) may be a better measure of students' introductory programming abilities, though still not explaining most of the observed variability.},
booktitle = {Proceedings of the 2024 on Innovation and Technology in Computer Science Education V. 1},
pages = {87–93},
numpages = {7},
keywords = {computer science education, introduction to programming, introductory programming, novice programming, programming education},
location = {Milan, Italy},
series = {ITiCSE 2024}
}

@inproceedings{10.1145/3641554.3701946,
author = {Li, Nero and Broner, Shahar and Kim, Yubin and Mizuo, Katrina and Sauder, Elijah and To, Claire and Wang, Albert and Gila, Ofek and Shindler, Michael},
title = {Investigating the Capabilities of Generative AI in Solving Data Structures, Algorithms, and Computability Problems},
year = {2025},
isbn = {9798400705311},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3641554.3701946},
doi = {10.1145/3641554.3701946},
abstract = {There is both great hope and concern about the future of Computer Science practice and education concerning the recent advent of large language models (LLMs).We present the first study to extensively evaluate the ability of such a model to solve problems in Computer Science Theory. Specifically, we tested 165 exam-level problems across 16 specific topics related to computer science theory, ranging from preliminary data structures to algorithm design paradigms to theory of computation (automata and complexity). Our results use the recent popular models (GPT-4 and GPT-4o). This is a rapidly evolving field, with model performance continuously improving. We present our results primarily as an indication of what they can already achieve-equivalently how they can already be useful-today, fully expecting them to improve even further in the near future. Our results show that what was very recently a state-of-the-art model (GPT-4) can solve 77\% of free-response problems in data structures and algorithms with little to no guidance. The latest model, GPT-4o, can solve around 46\% of the Theory of Computation problems we posed, with predictable categories for which problems it could not solve. When broken down by topic, the model can solve 80\% of problems in 4 out of the 15 topics and at least half in 8 other topics. Other problems, namely more visual problems, either require more substantial coaching or seem to still be beyond the capabilities of the language model--for now. By understanding the strengths and limitations of these models for solving theory problems, we can open the door to future work, ranging from human educational assessment on the topic to automated tutors for learners of the subject.},
booktitle = {Proceedings of the 56th ACM Technical Symposium on Computer Science Education V. 1},
pages = {659–665},
numpages = {7},
keywords = {algorithm design techniques, chatgpt, computational thinking, computer-assisted instruction, data structures, generative ai, gpt-4, gpt-4o, large language models},
location = {Pittsburgh, PA, USA},
series = {SIGCSETS 2025}
}

@inproceedings{10.1145/2899415.2899435,
author = {Park, Thomas H. and Kim, Meen Chul and Chhabra, Sukrit and Lee, Brian and Forte, Andrea},
title = {Reading Hierarchies in Code: Assessment of a Basic Computational Skill},
year = {2016},
isbn = {9781450342315},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2899415.2899435},
doi = {10.1145/2899415.2899435},
abstract = {One of the skills that comprise computational thinking is the ability to read code and reason about the hierarchical relationships between different blocks, expressions, elements, or other types of nodes, depending on the language. In this study, we present three new instruments for assessing different aspects of reading hierarchies in code, including vocabulary, reasoning, and fluency. One of these instruments is Nester, an interactive tool we have designed to elicit mental models about the hierarchical structure of code in computing languages ranging from HTML, CSS, and LaTeX to JavaScript and Lisp. We describe a lab study in which we administered these instruments to 24 participants with varying degrees of web development experience. We report findings from this study, including participants' ability to define, reason about, and manipulate hierarchies in code, and the errors and misconceptions that relate to them. Finally, we discuss avenues for future work.},
booktitle = {Proceedings of the 2016 ACM Conference on Innovation and Technology in Computer Science Education},
pages = {302–307},
numpages = {6},
keywords = {web development, program comprehension, computational thinking, assessment},
location = {Arequipa, Peru},
series = {ITiCSE '16}
}

@inproceedings{10.1145/3287324.3287353,
author = {Salac, Jean and White, Max and Wang, Ashley and Franklin, Diana},
title = {An Analysis through an Equity Lens of the Implementation of Computer Science in K-8 Classrooms in a Large, Urban School District},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3287353},
doi = {10.1145/3287324.3287353},
abstract = {Major metropolitan school districts around the United States are implementing computer science in elementary school classrooms as part of the CS for All (CS4All) initiative. Little is known, however, about the success of such a large-scale rollout, especially in terms of equity. In this study we analyze the performance of 4th grade classrooms completing three modules of an introductory computational thinking curriculum, looking at not only overall results but also the variance in performance between high-, mid-, and low-performing schools (as identified by their school report cards). We find that all classrooms are benefiting from the computational thinking (CT) curriculum, making great strides in providing equitable access to CT education. However, statistically-significant differences in performance are present, especially between the high- and low-performing schools, showing that there is still room for improvement in developing strategies and curricula for struggling learners.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1150–1156},
numpages = {7},
keywords = {scratch, k-8 education, diversity},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3372782.3407114,
author = {Shaw, Mia S.},
title = {Restorying through Computational Quilts: A Critical Approach Towards Reimagining Computer Science},
year = {2020},
isbn = {9781450370929},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3372782.3407114},
doi = {10.1145/3372782.3407114},
abstract = {While much attention has focused on promoting computational thinking in K-12 CS education, much less attention has been paid to the equally significant dimension of what it means to identify with the discipline. Previous approaches to CS identity have mostly focused on getting students to reveal their identifications in the form of drawings or survey responses, while more recent approaches have started to examine narratives in a field that historically has marginalized women and students of color. My dissertation seeks to broaden participation in computing by creating access for groups who have historically and structurally been excluded from CS. While learning computational skills and designing interactive paper quilts, high school students of color will draw upon their lived experiences to reimagine new connections and stories about CS. Using video observations and field notes, students' reflective worksheets and artifacts, and student interviews, I will explore what happens when youth of color use CS skills and digital technologies to "restory" their CS identities, the kinds of metanarratives about CS and computer scientists youth identify, and what the process of restorying looks like in practice.},
booktitle = {Proceedings of the 2020 ACM Conference on International Computing Education Research},
pages = {344–345},
numpages = {2},
keywords = {identity, equity, counter-narratives, computer science},
location = {Virtual Event, New Zealand},
series = {ICER '20}
}

@article{10.1145/3656408,
author = {Zakhour, George and Weisenburger, Pascal and Salvaneschi, Guido},
title = {Automated Verification of Fundamental Algebraic Laws},
year = {2024},
issue_date = {June 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {PLDI},
url = {https://doi.org/10.1145/3656408},
doi = {10.1145/3656408},
abstract = {Algebraic laws of functions in mathematics – such as commutativity, associativity, and idempotence – are often used as the basis to derive more sophisticated properties of complex mathematical structures and are heavily used in abstract computational thinking. Algebraic laws of functions in coding, however, are rarely considered. Yet, they are essential. For example, commutativity and associativity are crucial to ensure correctness of a variety of software systems in numerous domains, such as compiler optimization, big data processing, data flow processing, machine learning or distributed algorithms and data structures. Still, most programming languages lack built-in mechanisms to enforce and verify that operations adhere to such properties. In this paper, we propose a verifier specialized on a set of fundamental algebraic laws that ensures that such laws hold in application code. The verifier can conjecture auxiliary properties and can reason about both equalities and inequalities of expressions, which is crucial to prove a given property when other competitors do not succeed. We implement these ideas in the Propel verifier. Our evaluation against five state-of-the-art verifiers on a total of 142 instances of algebraic properties shows that Propel is able to automatically deduce algebraic properties in different domains that rely on such properties for correctness, even in cases where competitors fail to verify the same properties or time out.},
journal = {Proc. ACM Program. Lang.},
month = jun,
articleno = {178},
numpages = {24},
keywords = {Algebraic Properties, Type Systems, Verification}
}

@inproceedings{10.1145/3450337.3483472,
author = {Higashi, Ross and Harpstead, Erik and Solyst, Jaemarie and Kemper, Jonaya and Odili Uchidiuno, Judith and Hammer, Jessica},
title = {The Design of Co-Robotic Games for Computer Science Education},
year = {2021},
isbn = {9781450383561},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3450337.3483472},
doi = {10.1145/3450337.3483472},
abstract = {Digital games featuring programmable agents are popular tools for teaching coding and computational thinking skills. However, today's games perpetuate an arguably obsolete relationship between programmable agents and human operators. Borrowing from the field of human-robotics interaction, we argue that collaborative robots, or cobots, are a better model for thinking about computational agents, working directly with humans rather than in place of or at arm's length from them. In this paper, we describe an initial design inquiry into the design of “cobot games”, programmable agent scenarios in which players program an in-game ally to assist them in accomplishing gameplay objectives. We detail three questions that emerged out of this exploration, our present thinking on them, and plans for deepening inquiry into cobot game design moving forward.},
booktitle = {Extended Abstracts of the 2021 Annual Symposium on Computer-Human Interaction in Play},
pages = {111–116},
numpages = {6},
keywords = {Robotics education, Games-based learning, Cobots, Co-robotic games},
location = {Virtual Event, Austria},
series = {CHI PLAY '21}
}

@inproceedings{10.1145/3626253.3635495,
author = {Adrion, W. Richards and Pekta\c{s}, Emrah},
title = {Evolution of an Integrated, Elementary CSforAll Curriculum},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3635495},
doi = {10.1145/3626253.3635495},
abstract = {A research-practice partnership (RPP) used a teacher co-design process, supported by equity-focused professional development, to create an elementary-level curriculum that integrates content, practices, and learning progressions from state computing standards with other standards-based curricula. Most district students are part of historically marginalized groups and the RPP chose to develop an equity and inclusion-focused curriculum that would be taught in all elementary classrooms to all students. Twelve teacher teams, supported by researchers and ELL and SPED specialists, designed, piloted, and documented 23 modules of 4-8, 45-minute lessons across K-5. Early adopter teachers followed the pilots and implemented the modules in their classrooms with the goal of facilitating adoption by all elementary classroom teachers. After being interrupted by the pandemic, the RPP developed a strategy where principals in cohorts of schools agreed to collaborate with RPP school-based lead teachers to establish professional learning communities (PLCs) to support classroom implementation of the modules. Eleven schools participated in a 2021-22 cohort and nine more schools joined in 2022-23. Centering equity, PLCs, and quality module documentation and materials are key to sustaining and evolving the CSforAll curriculum. The modules were revised based on feedback obtained from ELL and SPED specialists, early adopters, teacher coordinators, researchers, and district curriculum directors. Using a large data set of meeting and classroom observation records, interviews, field notes, focus groups, surveys, and module documentation, we track the evolution of the curriculum and provide a detailed analysis of one module as an example.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1548–1549},
numpages = {2},
keywords = {computational thinking, k-5 computer science education, research-practice partnership, teacher preparation},
location = {Portland, OR, USA},
series = {SIGCSE 2024}
}

@inproceedings{10.1145/3641554.3701817,
author = {Rahimi, Masoumeh and Margulieux, Lauren E. and Anderson, Erin},
title = {CS Concepts and Contextual Factors in Integrated Computing Activities in U.S. Schools},
year = {2025},
isbn = {9798400705311},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3641554.3701817},
doi = {10.1145/3641554.3701817},
abstract = {Integrated computing uses computing tools and concepts to support learning in other disciplines while giving all students opportunities to experience computer science. Integrated computing is often motivated as a way to introduce computing to students in a low-stakes environment, reducing barriers to learning computer science, often especially for underrepresented groups. This study explored integrated computing activities implemented in US schools to examine which programming and CT concepts they teach and whether those concepts differed across contexts. We gathered data on 262 integrated computing activities from in-service K-12 teachers and 20 contextual factors related to the classroom, the teacher, and the school. Our analysis revealed that programming and CT concepts were inversely related to five contextual factors, such that factors predicting more CT concepts also predicted fewer programming concepts. These factors reflected school resources, such that wealthier schools used activities with more CT concepts and fewer programming concepts. In addition, factors related to underrepresented groups often related to fewer concepts being taught in activities. School racial composition was the only factor of the 20 that had a relationship with both types of concepts in the same direction-students from underrepresented groups used activities with fewer CT and programming concepts. Our findings suggest that, although integrated computing can potentially introduce computing to a broader audience, we must evaluate what these activities are teaching and to whom. Another primary contribution of this work is an open-access dataset about integrated computing activities, the concepts that they teach, and the contextual factors around their use.},
booktitle = {Proceedings of the 56th ACM Technical Symposium on Computer Science Education V. 1},
pages = {931–937},
numpages = {7},
keywords = {computational thinking, computing integration, cs+x, integrated computing, k-12 computer science education, survey},
location = {Pittsburgh, PA, USA},
series = {SIGCSETS 2025}
}

@inproceedings{10.1145/3328778.3366902,
author = {Liesaputra, Veronica and Ramirez-Prado, Guillermo and Barmada, Bashar and Song, Lei},
title = {Future-Proofing Kiwi Kids Through the Use of Digital Technology},
year = {2020},
isbn = {9781450367936},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3328778.3366902},
doi = {10.1145/3328778.3366902},
abstract = {The common approach for introducing middle school and high school students to computational thinking and engineering is through programming or robotics activities that were designed without much social context. Therefore, one of the challenges such outreach programs pose is further stereotyping of students who are interested in computer science, by presenting them as people who ought to be hyper-intelligent and very much focused on computers with no social skills. Realizing the above, and wanting to attract a diverse audience to study computer science, we developed a one-day workshop which showcases the interdisciplinary nature of computer science and the various ways computing can help students discover and solve societal problems. We chose multiculturalism, cyber security and air pollution as the context of our computational thinking activities. This paper describes our experiences in developing and teaching the workshops that runs three to five times a year, hosted either in our institute or at local schools. Regardless of students' previous STEM experiences and socioeconomic statuses, both students and teachers reported that the knowledge gained enabled them to either create a computer program or a robot and also led to a better understanding of how computers can be used in daily life. In other words, the workshop successfully opened the minds and perspectives of the middle school and high school students on computer science. Additionally, over time, we also observed an increased number of students and schools participating in such workshops.},
booktitle = {Proceedings of the 51st ACM Technical Symposium on Computer Science Education},
pages = {507–513},
numpages = {7},
keywords = {social good, raspberry pi, outreach, multiculturalism, middle school, k-12 education, introduction to computer science, cyber security, air pollution},
location = {Portland, OR, USA},
series = {SIGCSE '20}
}

@inproceedings{10.1145/2818314.2818338,
author = {Moreno-Le\'{o}n, Jes\'{u}s and Robles, Gregorio},
title = {Dr. Scratch: a Web Tool to Automatically Evaluate Scratch Projects},
year = {2015},
isbn = {9781450337533},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2818314.2818338},
doi = {10.1145/2818314.2818338},
abstract = {This poster paper presents the operation and the new features of Dr. Scratch, an award-winning gamified web application that allows to perform automatic analysis of Scratch projects to assess the development of computational thinking and detect some bad programming habits that are common in students learning to program in this environment.},
booktitle = {Proceedings of the Workshop in Primary and Secondary Computing Education},
pages = {132–133},
numpages = {2},
keywords = {learning, computational thinking, coding, Scratch, Assessment},
location = {London, United Kingdom},
series = {WiPSCE '15}
}

@inproceedings{10.1145/3466725.3466737,
author = {Lemonica Rosa, Rodrigo},
title = {Social Necklace Project: A student-made gadget to help people during the COVID19 pandemic},
year = {2021},
isbn = {9781450389891},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3466725.3466737},
doi = {10.1145/3466725.3466737},
abstract = {This paper presents the Y9 (9th-grade level) project from Beacon School, S\~{a}o Paulo - Brazil, entitled Social Necklace. The main scope was to bring for students’ maker learning, programming literacy, and computational thinking. Through hands-on activities, all students could think, experiment, create, and learn. Fundamental premises to transform them into producers instead of simple technology consumers. During classes, the STEAM and PBL (Project Based Learning) approaches were the basis, which allowed students to choose the theme COVID-19, the driving question: Can technology contribute to helping in the control and prevention of pandemics? And coding and setting a gadget using the BBC Micro:bit, as an answer to the question. The work carried out with the students enabled many dialogues between the different fields of knowledge. Through maker education, it was possible to engage students in learning activities very distinct from traditional education.},
booktitle = {FabLearn Europe / MakeEd 2021 - An International Conference on Computing, Design and Making in Education},
articleno = {12},
numpages = {5},
keywords = {bit, Social Necklace Project, Programming Literacy},
location = {St. Gallen, Switzerland},
series = {FabLearn Europe / MakeEd 2021}
}

@inproceedings{10.1145/3287324.3293757,
author = {Biswas, Gautam and Hutchins, Nicole and L\'{e}deczi, \'{A}kos and Grover, Shuchi and Basu, Satabdi},
title = {Integrating Computational Modeling in K-12 STEM Classrooms},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3293757},
doi = {10.1145/3287324.3293757},
abstract = {C2STEM is a web-based learning environment founded on a novel paradigm that combines block-structured, visual programming with the concept of domain specific modeling languages (DSMLs) to promote the synergistic learning of discipline-specific and computational thinking (CT) concepts and practices. Our design-based, collaborative learning environment aims to provide students in K-12 classrooms with immersive experiences in CT through computational modeling in realistic scenarios (e.g., building models of scientific phenomena). The goal is to increase student engagement and include inclusive opportunities for developing key computational skills needed for the 21st century workforce. Research implementations that include a semester-long high school physics classroom study have demonstrated the effectiveness of our approach in supporting synergistic learning of STEM and CS/CT concepts and practices, especially when compared to a traditional classroom approach. This technology demonstration will showcase our CS+X (X = physics, marine biology, or earth science) learning environment and associated curricula. Participants can engage in our design process and learn how to develop curricular modules that cover STEM and CS/CT concepts and practices. Our work is supported by an NSF STEM+C grant and involves a multi-institutional team comprising Vanderbilt University, SRI International, Looking Glass Ventures, Stanford University, Salem State University, and ETR. More information, including example computational modeling tasks, can be found at C2STEM.org.},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1288},
numpages = {1},
keywords = {modeling, k12, cs+x, computational thinking},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3649217.3653586,
author = {Pozzan, Gabriele and Padova, Costanza and Montuori, Chiara and Arf\'{e}, Barbara and Vardanega, Tullio},
title = {Experimental Analysis of First-Grade Students' Block-Based Programming Problem Solving Processes},
year = {2024},
isbn = {9798400706004},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3649217.3653586},
doi = {10.1145/3649217.3653586},
abstract = {This work presents an experimental analysis of first-grade students' block-based programming trajectories. These trajectories consist of edit-level program snapshots that capture learners' problem-solving processes in a navigational microworld. Our results highlight the potential of this fine-grained data capture. Snapshot frequencies in trajectories collected before and after a coding intervention showcase the collective progress of the learners. Graph visualizations, in which nodes represent snapshots and directed edges code edits, highlight strategies, pitfalls and debugging procedures. Individual programming trajectories shed light on details of learners' problem-solving processes that less granular analysis would conceal. Various works in the field of Learning Analytics research show the usefulness of collecting fine-grained process data that proceed from programming activities. However, how to analyze this data is still an open question and research on the subject is in an experimental phase. We contribute to this experimentation by analyzing and discussing results collected from 30 first-grade students in a pretest-posttest study.},
booktitle = {Proceedings of the 2024 on Innovation and Technology in Computer Science Education V. 1},
pages = {143–149},
numpages = {7},
keywords = {block-based programming, computational thinking, learning analytics, programming trajectories},
location = {Milan, Italy},
series = {ITiCSE 2024}
}

@inproceedings{10.1145/3287324.3293715,
author = {Nche, Olivia},
title = {Engaging African American Elementary School Children in Code Understanding},
year = {2019},
isbn = {9781450358903},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3287324.3293715},
doi = {10.1145/3287324.3293715},
abstract = {This paper summarizes the results of a research project to broaden access to computing. The project is aimed at improving the attitudes and computational thinking skills for African American elementary school children in the 3rd to 5th grades and to understand their difficulties in reasoning about code. This was done within the context of a five-week summer camp. There were 40 children of whom about half were females. Along with instruction, we used a custom video game to teach code tracing. We used video game data and pre and posttests to assess students' performance. Qualitative and quantitative results from our mixed method design show cognitive and affective improvements as well as improvements in computational thinking skills. The data we collected also highlighted potential common mistakes that elementary school children might make as they attempt to reason about code. It shows the potential in games to motivate code understanding practice and improve learning. SIGCSE '19, February 27-March 2, 2019, Minneapolis, MN, USA © 2019 Copyright is held by the owner/author(s). ACM ISBN 978-1-4503-5890-3/19/02. https://doi.org/10.1145/3287324.3293715},
booktitle = {Proceedings of the 50th ACM Technical Symposium on Computer Science Education},
pages = {1296},
numpages = {1},
keywords = {video game, problem solving, integrative approach, computational thinking, code tracing, broadening participation},
location = {Minneapolis, MN, USA},
series = {SIGCSE '19}
}

@inproceedings{10.1145/3486011.3486418,
author = {Lozano-Arias, Jes\'{u}s and Rodr\'{\i}guez-Sedano, Francisco J. and Gonz\'{a}lez-Alonso, Mar\'{\i}a-Inmaculada and Conde, Miguel \'{A}ngel},
title = {Using Educational Robotic Exoskeleton for the Acquisition of Cross-Curricular Competences in Higher Education},
year = {2021},
isbn = {9781450390668},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3486011.3486418},
doi = {10.1145/3486011.3486418},
abstract = {Today, Spanish universities are already adapted to the Common European Higher Education Area, which is based on the acquisition of competences by the student. Nevertheless, while the acquisition of specific competences is well assumed by the different subjects of each degree, the same is not true for cross-curricular competences. More specifically, in most engineering studies, these competences are developed indirectly through elective subjects or other complementary training activities. The main objective of this work is to design a prototype of a low-cost and open-access exoskeleton that can be used in different engineering degrees for the acquisition of cross-curricular competences. Once this prototype has been designed, we propose to use it in a practice to be carried out in the laboratory following the project-based learning methodology from a STEAM approach. With the use of a robotics kit and a project-based learning methodology, we achieve the goals of educational robotics and computational thinking in a higher education environment.},
booktitle = {Ninth International Conference on Technological Ecosystems for Enhancing Multiculturality (TEEM'21)},
pages = {51–57},
numpages = {7},
keywords = {exoskeleton, engineering education, STEAM education, Cross-curricular competences},
location = {Barcelona, Spain},
series = {TEEM'21}
}

@inproceedings{10.1145/3626253.3635336,
author = {Popov, Aleksandr},
title = {Simulating Election Votes},
year = {2024},
isbn = {9798400704246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3626253.3635336},
doi = {10.1145/3626253.3635336},
abstract = {CS0 and CS1 courses are becoming an essential part of many social science programs, including sociology and political science. This particular assignment was designed as part of the 'Basics of Programming in Python' course for undergraduate political science students. The course aims not only to prepare students for the unified programming exam, but also to apply concepts of computational thinking in the context of political science problems. By linking these fields, students learn to overcome inner barriers in coding and explore the potential of computational social science methods for both academic path and career.  This project seeks such a connection between subjects of political science major as Comparative Electoral Systems and Quantitative Methods of Political Research, and concepts of computer science. Students process the generated votes, applying critical thinking to identify spoilt ballots, and then formulate rules for counting votes (First-past-the-post, Borda count, Condorcet winner criterion) in algorithmic form. Optionally, a short essay can be added in which students are asked to speculate about political leanings, the transitivity of preferences and the advantages/disadvantages of particular electoral systems based on analyses of the data in the assignment. As the result, students not only develop hard skills in programming, but most importantly conceptualize complicated topics through the prism of their specialization, fostering the ability to see the connections between these fields and understand how they can work together to address complex real-world scenarios.},
booktitle = {Proceedings of the 55th ACM Technical Symposium on Computer Science Education V. 2},
pages = {1915},
numpages = {1},
keywords = {computational social science, teaching computational thinking},
location = {Portland, OR, USA},
series = {SIGCSE 2024}
}

@inproceedings{10.1145/3545945.3569823,
author = {Denny, Paul and Kumar, Viraj and Giacaman, Nasser},
title = {Conversing with Copilot: Exploring Prompt Engineering for Solving CS1 Problems Using Natural Language},
year = {2023},
isbn = {9781450394314},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3545945.3569823},
doi = {10.1145/3545945.3569823},
abstract = {GitHub Copilot is an artificial intelligence tool for automatically generating source code from natural language problem descriptions. Since June 2022, Copilot has officially been available for free to all students as a plug-in to development environments like Visual Studio Code. Prior work exploring OpenAI Codex, the underlying model that powers Copilot, has shown it performs well on typical CS1 problems thus raising concerns about its potential impact on how introductory programming courses are taught. However, little is known about the types of problems for which Copilot does not perform well, or about the natural language interactions that a student might have with Copilot when resolving errors. We explore these questions by evaluating the performance of Copilot on a publicly available dataset of 166 programming problems. We find that it successfully solves around half of these problems on its very first attempt, and that it solves 60\% of the remaining problems using only natural language changes to the problem description. We argue that this type of prompt engineering, which we believe will become a standard interaction between human and Copilot when it initially fails, is a potentially useful learning activity that promotes computational thinking skills, and is likely to change the nature of code writing skill development.},
booktitle = {Proceedings of the 54th ACM Technical Symposium on Computer Science Education V. 1},
pages = {1136–1142},
numpages = {7},
keywords = {artificial intelligence, cs1, foundation models, github copilot, introductory programming, large language models, openai},
location = {Toronto ON, Canada},
series = {SIGCSE 2023}
}

